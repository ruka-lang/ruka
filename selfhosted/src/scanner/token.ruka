local ruka = @import("root")
local utils = ruka.utils

local this = @this()
const t = record {
    kind: kind,
    owner: string,
    pos: utils.pos
}

const newToken = (kind, owner, pos) do
    { kind, owner, pos }
end

const kind = variant {
    ident: string,
    atom: string,
    string: string,
    char: string,
    int: string,
    float: string,
    keyword: keyword,
    mode: mode,

    //Assigment
    assign,          // =
    assign_exp,      // :=
    // Punctuation
    dot,             // .
    comma,           // ,
    semicolon,       // ;
    colon,           // :
    lparen,          // (
    rparen,          // )
    lbracket,        // [
    rbracket,        // ]
    lsquirly,        // {
    rsquirly,        // }
    quote,           // '
    double_quote,    // "
    backtick,        // `
    backslash,       // \
    arrow,           // ->
    wide_arrow,      // =>
    // Operators
    address,         // @
    cash,            // $
    pound,           // #
    bang,            // !
    question,        // ?
    range,           // ..
    range_inclusive, // ..=
    forward_apply,   // <|
    reverse_apply,   // |>
    concat,          // <>
    // Arithmetic
    plus,            // +
    minus,           // -
    asterisk,        // *
    slash,           // /
    percent,         // %
    increment,       // ++
    decrement,       // --
    square,          // **
    // Bitwise
    ampersand,       // &
    pipe,            // |
    caret,           // ^
    tilde,           // ~
    lshift,          // <<
    rshift,          // >>
    // Comparators
    equal,           // ==
    not_equal,       // !=
    lesser,          // <
    lesser_equal,    // <=
    greater,         // >
    greater_equal,   // >=
    // Miscelaneous
    newline,         // \n
    illegal,
    eof              // \x00
}

const keyword = variant {
    // Bindings
    const,
    local,
    let,
    var,
    // Scope
    do,
    end,
    // Types
    module,
    record,
    tuple,
    variant,
    interface,
    error,
    any,
    // Bitwise
    true,
    false,
    and,
    or,
    not,
    // Control flow
    for,
    in,
    while,
    break,
    continue,
    match,
    if,
    else
    return,
    defer,
    // Miscelaneous
    evaluate,
    test
}

const mode = variant {
    loc, // Local borrow mode, immutable borrow which cannot escape function scope
    mut, // Mutable borrow mode, mutable borrow which cannot escape function scope
    ref, // Reference borrow mode, immutable and can escape function scope
    ptr, // Pointer borrow mode, mutable and can escape function scope
    mov, // Move mode, variable is moved to the function scope
    stc, // Stack mode, variable is allocated in the stack, argument is passed by value
    eva  // Evaluate mode, varible is evaluated during compilation. Default mode when storing or passing types
}