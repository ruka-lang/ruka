/*
 *
 */

const buffer = @import("basics/buffer.ruka")
const io = @import("basics/io.ruka")

const Vector = record {
    const t = record {
        x: u8,
        y: u8,
        local z: u8
    }

    const new = (x, y) -> t {
        return { x, y, z = 0 }
    }

    const add = (self: t, other: t) -> t {
        return {
            x = self.x + other.x,
            y = self.y + other.y,
            z = self.z + other.z
        }
    }

    const write = (self: t, writer: any mut io.Writer) {
        writer.writeRecord(self).?
    }

    test "addition" {
        const testcase = record {
            a: t,
            b: t,
            want: t
        }

        let tests = [string, testcase]{
            "addition" = {
                num = .new(1, 2),
                div = .new(3, 4),
                want = .new(4, 6)
            }
        }

        for test, data in tests {
            if test == "addition" {
                let result = data.num.add(data.div)
                @expect(result == data.want).?
            }
            @println("test: #{test} passed")
        }
    }
}
