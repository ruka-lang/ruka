use std = @import("std")
use {Vector} = @import("basics")

const Buffer = (# size: usize) do
    return record {
        const t = record {
            buf: [size]u8,
            front: usize,
            back: usize,

            mtx: std.sync.Mutex,
            add: std.sync.CV,
            rem: std.sync.CV
        }

        const init = () do
            return {
                buf = {},
                front = 0,
                back = 0,

                mtx = .init,
                add = .init,
                rem = .init
            }
        end

        private const Writer = record {
            buf: *t
        }

        const writeRecord = (self: Writer, val: Vector.t) do
            self.buf.put(val.x)
            self.buf.put(val.y)
        end

        private const Reader = record {
            buf: *t
        }

        const readByte = (self: Reader) do
            self.buf.get()
        end

        const writer = (self: t) do
            return writer.{
                buf = self.&
            }
        end

        const reader = (self: t) do
            return reader.{
                buf = self.&
            }
        end

        const put = (self: *t, value) do
            self.mtx.lock()
            defer self.mtx.unlock()

            while self.front -| self.back == 10 do
                self.rem.wait(&self.mtx)
            end

            self.buf[self.front % 10] = value
            self.front += 1

            self.add.signal()
        end

        const get = (self: *t) do
            self.mtx.lock()
            defer self.mtx.unlock()

            while self.back == self.front do
                self.add.wait(&self.mtx)
            end

            self.back += 1
            self.removed.signal()

            return self.buf[self.back % 10]
        end
    }
end
