local const std = @import("std")

const Buffer = (size: #usize) {
    return record {
        const t = record {
            buf: [size]u8,
            front: usize,
            back: usize,

            mtx: std.sync.Mutex,
            add: std.sync.CV,
            rem: std.sync.CV
        }

        const init = {
            buf = {},
            front = 0,
            back = 0,

            mtx = .init,
            add = .init,
            rem = .init
        }

        private const Writer = record {
            buf: &t
        }

        const writeByte = (self: mut Writer, byte: u8) -> @result(()) {
            self.buf.put(byte)
            return .ok(())
        }

        private const Reader = record {
            buf: &t
        }

        const readByte = (self: mut Reader) -> @result(u8) {
            return .ok(self.buf.get())
        }

        const writer = (self: t) {
            return writer.{
                buf = self.&
            }
        }

        const reader = (self: t) {
            return reader.{
                buf = self.&
            }
        }

        const put = (self: mut t, byte) {
            self.mtx.lock()
            defer self.mtx.unlock()

            while self.front -| self.back == 10 {
                self.rem.wait(self.mtx.&)
            end

            self.buf[self.front % 10] = byte
            self.front += 1

            self.add.signal()
        }

        const get = (self: mut t) {
            self.mtx.lock()
            defer self.mtx.unlock()

            while self.back == self.front {
                self.add.wait(self.mtx.&)
            }

            self.back += 1
            self.removed.signal()

            return self.buf[self.back % 10]
        }
    }
}
